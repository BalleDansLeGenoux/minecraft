Structure Chunk / Cube :

    mtn faut que je me reéxplique ce que j'ai compris, en gros un chunk sera un octree (un arbre quoi), chaque noeud de cet octree contiendras une liste avec des cubes, le but de l'octree est de divisé le chunk en plusieur zone (espace), la recherche d'un cube commencera de façon grossière (recherche du noeud/zone) du chunk dans lequel il se trouve, puis d'affine en le recherchant dans la liste du noeud.

    ça s'était la version simple.

    ensuite il faudra optimisé, par exemple les cubes d'air je m'en branle, pas besion de les stocker, donc dans certains chunk, il y aura des zone + ou - dense de cube, donc l'ideal serais que chaque liste est une taille maximal de cubes et que le chunk commence avec un seul noeud couvrant tout son espace, puis quand la liste atteint est pleine, on divise le chunk en 2 noeud, puis on reparti les cubes de manière égale (ou presque) et de façon a ce que la recherche de cube en fonction de leur coord soit opti.

    autre petite chose, quand je divise un chunk en 2, je dois trouvé comment couper le chunk (soit dans l'axe x, y ou z) en faisant les 3 tests de div pas 2 dans chaque axe et verifier lequel a la meilleur repartition pour l'apliquer ensuite.

    minecraft_in_rust /   <-- changement, je reste en c++ en fait

        src /
            load_config.rs
            config.rs (contient toutes les constantes de config du projet)
            cube.rs
            chunk.rs
            world.rs
    
        config /
            cube.conf
            chunk.conf
            world.conf


A faire :
    - guettes removeFace il est appelé dans updateMesh mais il appel updateBuffer
    - mets tout en multithread connard


Multithread :

    1. Thread principal (Main Thread) :
        . Gestion de l'interface utilisateur (GUI).
        . Gestion des entrées utilisateur (mouvement, actions, etc.).
        . Synchronisation des différents threads.

    2. Thread de rendu (Rendering Thread) :
        . Gère le rendu graphique du jeu en utilisant OpenGL.
        . Calcul des transformations, des shaders, et envoie les commandes de rendu à la carte graphique.

    3. Thread de mise à jour du monde (World Update Thread) :
        . Gère la simulation du monde du jeu (génération de terrain, physique, etc.).
        . Met à jour la position des entités, la météo, les interactions des objets, etc.

    4. Thread de chargement (Loading Thread) :
        . Gère le chargement des ressources en arrière-plan (textures, modèles, etc.) pour éviter de bloquer le thread principal.

    5. Thread audio (Audio Thread) :
        . Gère la lecture des effets sonores et de la musique en arrière-plan.

